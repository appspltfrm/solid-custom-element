{"version":3,"file":"defineLazyCustomElement.js","sources":["../src/lib/defineLazyCustomElement.ts"],"sourcesContent":["import {CustomElement} from \"./customElement\";\nimport {customElementBirthmark} from \"./customElementBirthmark\";\nimport {CustomElementComponent} from \"./defineComponent\";\nimport {buildFinalClass} from \"./internals/buildFinalClass\";\nimport {InternalClass} from \"./internals/InternalClass\";\n\ntype LazyType = Promise<CustomElementConstructor | {default: CustomElementConstructor} | CustomElementComponent<any, CustomElement> | {default: CustomElementComponent<any, CustomElement>}>;\n\nconst elements: {[tagName: string]: () => LazyType} = {};\n\nconst observer = new MutationObserver(async (mutations) => {\n\n    // elements that were defined within this call\n    let definedElements: string[] = [];\n\n    for (const m of mutations) {\n        if (m.addedNodes) {\n            for (const n of m.addedNodes) {\n                if (n instanceof Element && elements[n.tagName]) {\n\n                    if (!customElements.get(n.tagName)) {\n\n                        let elementClass = await elements[n.tagName]();\n                        if (typeof elementClass === \"object\") {\n                            elementClass = elementClass.default;\n                        }\n\n                        if (typeof elementClass === \"function\" && (elementClass as unknown as CustomElementComponent<any, CustomElement>).defineCustomElement) {\n                            (elementClass as unknown as CustomElementComponent<any, CustomElement>).defineCustomElement();\n\n                        } else {\n\n                            if ((elementClass as unknown as InternalClass)[customElementBirthmark]) {\n                                elementClass = buildFinalClass(elementClass as any);\n                            }\n\n                            customElements.define(n.tagName.toLowerCase(), elementClass as any);\n                        }\n\n                        definedElements.push(n.tagName);\n                    }\n\n                    if (definedElements.includes(n.tagName)) {\n                        customElements.upgrade(n);\n                    }\n                }\n            }\n        }\n    }\n\n    for (const e of definedElements) {\n        delete elements[e];\n    }\n\n    if (Object.keys(elements).length === 0) {\n        observer.disconnect();\n    }\n})\n\nlet connected = false;\n\nexport function defineLazyCustomElement(tagName: string, loader: () => LazyType): void {\n\n    tagName = tagName.toUpperCase();\n\n    if (customElements.get(tagName) || elements[tagName]) {\n        throw new Error(`Custom element ${tagName} already defined`);\n    }\n\n    elements[tagName] = loader;\n\n    if (!connected) {\n        connected = true;\n        observer.observe(document, {subtree: true, childList: true});\n    }\n}\n"],"names":["elements","observer","mutations","definedElements","m","n","elementClass","customElementBirthmark","buildFinalClass","e","connected","defineLazyCustomElement","tagName","loader"],"mappings":";;AAQA,MAAMA,IAAgD,CAAA,GAEhDC,IAAW,IAAI,iBAAiB,OAAOC,MAAc;AAGvD,MAAIC,IAA4B,CAAA;AAEhC,aAAWC,KAAKF;AACZ,QAAIE,EAAE;AACS,iBAAAC,KAAKD,EAAE;AACd,YAAIC,aAAa,WAAWL,EAASK,EAAE,OAAO,GAAG;AAE7C,cAAI,CAAC,eAAe,IAAIA,EAAE,OAAO,GAAG;AAEhC,gBAAIC,IAAe,MAAMN,EAASK,EAAE,OAAO,EAAE;AACzC,YAAA,OAAOC,KAAiB,aACxBA,IAAeA,EAAa,UAG5B,OAAOA,KAAiB,cAAeA,EAAuE,sBAC7GA,EAAuE,oBAAoB,KAIvFA,EAA0CC,CAAsB,MACjED,IAAeE,EAAgBF,CAAmB,IAGtD,eAAe,OAAOD,EAAE,QAAQ,YAAA,GAAeC,CAAmB,IAGtDH,EAAA,KAAKE,EAAE,OAAO;AAAA,UAClC;AAEA,UAAIF,EAAgB,SAASE,EAAE,OAAO,KAClC,eAAe,QAAQA,CAAC;AAAA,QAEhC;AAAA;AAKZ,aAAWI,KAAKN;AACZ,WAAOH,EAASS,CAAC;AAGrB,EAAI,OAAO,KAAKT,CAAQ,EAAE,WAAW,KACjCC,EAAS,WAAW;AAE5B,CAAC;AAED,IAAIS,IAAY;AAEA,SAAAC,EAAwBC,GAAiBC,GAA8B;AAInF,MAFAD,IAAUA,EAAQ,eAEd,eAAe,IAAIA,CAAO,KAAKZ,EAASY,CAAO;AACzC,UAAA,IAAI,MAAM,kBAAkBA,mBAAyB;AAG/D,EAAAZ,EAASY,CAAO,IAAIC,GAEfH,MACWA,IAAA,IACZT,EAAS,QAAQ,UAAU,EAAC,SAAS,IAAM,WAAW,IAAK;AAEnE;"}